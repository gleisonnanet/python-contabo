# coding: utf-8

"""
    Contabo API


    OpenAPI spec version: 1.0.0
    Contact: support@contabo.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UpgradeAutoScalingType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'state': 'str',
        'size_limit_tb': 'float'
    }

    attribute_map = {
        'state': 'state',
        'size_limit_tb': 'sizeLimitTB'
    }

    def __init__(self, state=None, size_limit_tb=None):  # noqa: E501
        """UpgradeAutoScalingType - a model defined in Swagger"""  # noqa: E501
        self._state = None
        self._size_limit_tb = None
        self.discriminator = None
        if state is not None:
            self.state = state
        if size_limit_tb is not None:
            self.size_limit_tb = size_limit_tb

    @property
    def state(self):
        """Gets the state of this UpgradeAutoScalingType.  # noqa: E501

        State of the auto scaling for the current object storage.  # noqa: E501

        :return: The state of this UpgradeAutoScalingType.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this UpgradeAutoScalingType.

        State of the auto scaling for the current object storage.  # noqa: E501

        :param state: The state of this UpgradeAutoScalingType.  # noqa: E501
        :type: str
        """
        allowed_values = ["enabled", "disabled"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def size_limit_tb(self):
        """Gets the size_limit_tb of this UpgradeAutoScalingType.  # noqa: E501

        Auto-scaling size limit for the current object storage.  # noqa: E501

        :return: The size_limit_tb of this UpgradeAutoScalingType.  # noqa: E501
        :rtype: float
        """
        return self._size_limit_tb

    @size_limit_tb.setter
    def size_limit_tb(self, size_limit_tb):
        """Sets the size_limit_tb of this UpgradeAutoScalingType.

        Auto-scaling size limit for the current object storage.  # noqa: E501

        :param size_limit_tb: The size_limit_tb of this UpgradeAutoScalingType.  # noqa: E501
        :type: float
        """

        self._size_limit_tb = size_limit_tb

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpgradeAutoScalingType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpgradeAutoScalingType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
