# coding: utf-8

"""
    Contabo API


    OpenAPI spec version: 1.0.0
    Contact: support@contabo.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UpdateObjectStorageResponseData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'tenant_id': 'str',
        'customer_id': 'str',
        'object_storage_id': 'str',
        'created_date': 'str',
        'data_center': 'str',
        'auto_scaling': 'AllOfUpdateObjectStorageResponseDataAutoScaling',
        's3_url': 'str',
        'status': 'str',
        'total_purchased_space_tb': 'float'
    }

    attribute_map = {
        'tenant_id': 'tenantId',
        'customer_id': 'customerId',
        'object_storage_id': 'objectStorageId',
        'created_date': 'createdDate',
        'data_center': 'dataCenter',
        'auto_scaling': 'autoScaling',
        's3_url': 's3Url',
        'status': 'status',
        'total_purchased_space_tb': 'totalPurchasedSpaceTB'
    }

    def __init__(self, tenant_id=None, customer_id=None, object_storage_id=None, created_date=None, data_center=None, auto_scaling=None, s3_url=None, status=None, total_purchased_space_tb=None):  # noqa: E501
        """UpdateObjectStorageResponseData - a model defined in Swagger"""  # noqa: E501
        self._tenant_id = None
        self._customer_id = None
        self._object_storage_id = None
        self._created_date = None
        self._data_center = None
        self._auto_scaling = None
        self._s3_url = None
        self._status = None
        self._total_purchased_space_tb = None
        self.discriminator = None
        if tenant_id is not None:
            self.tenant_id = tenant_id
        if customer_id is not None:
            self.customer_id = customer_id
        if object_storage_id is not None:
            self.object_storage_id = object_storage_id
        if created_date is not None:
            self.created_date = created_date
        if data_center is not None:
            self.data_center = data_center
        if auto_scaling is not None:
            self.auto_scaling = auto_scaling
        self.s3_url = s3_url
        if status is not None:
            self.status = status
        if total_purchased_space_tb is not None:
            self.total_purchased_space_tb = total_purchased_space_tb

    @property
    def tenant_id(self):
        """Gets the tenant_id of this UpdateObjectStorageResponseData.  # noqa: E501

        Your customer tenant id  # noqa: E501

        :return: The tenant_id of this UpdateObjectStorageResponseData.  # noqa: E501
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this UpdateObjectStorageResponseData.

        Your customer tenant id  # noqa: E501

        :param tenant_id: The tenant_id of this UpdateObjectStorageResponseData.  # noqa: E501
        :type: str
        """
        if tenant_id is None:
            raise ValueError("Invalid value for `tenant_id`, must not be `None`")  # noqa: E501

        self._tenant_id = tenant_id

    @property
    def customer_id(self):
        """Gets the customer_id of this UpdateObjectStorageResponseData.  # noqa: E501

        Your customer number  # noqa: E501

        :return: The customer_id of this UpdateObjectStorageResponseData.  # noqa: E501
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this UpdateObjectStorageResponseData.

        Your customer number  # noqa: E501

        :param customer_id: The customer_id of this UpdateObjectStorageResponseData.  # noqa: E501
        :type: str
        """
        if customer_id is None:
            raise ValueError("Invalid value for `customer_id`, must not be `None`")  # noqa: E501

        self._customer_id = customer_id

    @property
    def object_storage_id(self):
        """Gets the object_storage_id of this UpdateObjectStorageResponseData.  # noqa: E501

        Object storage id  # noqa: E501

        :return: The object_storage_id of this UpdateObjectStorageResponseData.  # noqa: E501
        :rtype: str
        """
        return self._object_storage_id

    @object_storage_id.setter
    def object_storage_id(self, object_storage_id):
        """Sets the object_storage_id of this UpdateObjectStorageResponseData.

        Object storage id  # noqa: E501

        :param object_storage_id: The object_storage_id of this UpdateObjectStorageResponseData.  # noqa: E501
        :type: str
        """
        if object_storage_id is None:
            raise ValueError("Invalid value for `object_storage_id`, must not be `None`")  # noqa: E501

        self._object_storage_id = object_storage_id

    @property
    def created_date(self):
        """Gets the created_date of this UpdateObjectStorageResponseData.  # noqa: E501

        Creation date for object storage.  # noqa: E501

        :return: The created_date of this UpdateObjectStorageResponseData.  # noqa: E501
        :rtype: str
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this UpdateObjectStorageResponseData.

        Creation date for object storage.  # noqa: E501

        :param created_date: The created_date of this UpdateObjectStorageResponseData.  # noqa: E501
        :type: str
        """
        if created_date is None:
            raise ValueError("Invalid value for `created_date`, must not be `None`")  # noqa: E501

        self._created_date = created_date

    @property
    def data_center(self):
        """Gets the data_center of this UpdateObjectStorageResponseData.  # noqa: E501

        Data center of the object storage.  # noqa: E501

        :return: The data_center of this UpdateObjectStorageResponseData.  # noqa: E501
        :rtype: str
        """
        return self._data_center

    @data_center.setter
    def data_center(self, data_center):
        """Sets the data_center of this UpdateObjectStorageResponseData.

        Data center of the object storage.  # noqa: E501

        :param data_center: The data_center of this UpdateObjectStorageResponseData.  # noqa: E501
        :type: str
        """
        if data_center is None:
            raise ValueError("Invalid value for `data_center`, must not be `None`")  # noqa: E501

        self._data_center = data_center

    @property
    def auto_scaling(self):
        """Gets the auto_scaling of this UpdateObjectStorageResponseData.  # noqa: E501

        The auto scaling limit of the object storage.  # noqa: E501

        :return: The auto_scaling of this UpdateObjectStorageResponseData.  # noqa: E501
        :rtype: AllOfUpdateObjectStorageResponseDataAutoScaling
        """
        return self._auto_scaling

    @auto_scaling.setter
    def auto_scaling(self, auto_scaling):
        """Sets the auto_scaling of this UpdateObjectStorageResponseData.

        The auto scaling limit of the object storage.  # noqa: E501

        :param auto_scaling: The auto_scaling of this UpdateObjectStorageResponseData.  # noqa: E501
        :type: AllOfUpdateObjectStorageResponseDataAutoScaling
        """
        if auto_scaling is None:
            raise ValueError("Invalid value for `auto_scaling`, must not be `None`")  # noqa: E501

        self._auto_scaling = auto_scaling

    @property
    def s3_url(self):
        """Gets the s3_url of this UpdateObjectStorageResponseData.  # noqa: E501

        S3 URL to connect to your S3 compatible object storage  # noqa: E501

        :return: The s3_url of this UpdateObjectStorageResponseData.  # noqa: E501
        :rtype: str
        """
        return self._s3_url

    @s3_url.setter
    def s3_url(self, s3_url):
        """Sets the s3_url of this UpdateObjectStorageResponseData.

        S3 URL to connect to your S3 compatible object storage  # noqa: E501

        :param s3_url: The s3_url of this UpdateObjectStorageResponseData.  # noqa: E501
        :type: str
        """
        if s3_url is None:
            raise ValueError("Invalid value for `s3_url`, must not be `None`")  # noqa: E501

        self._s3_url = s3_url

    @property
    def status(self):
        """Gets the status of this UpdateObjectStorageResponseData.  # noqa: E501

        The object storage status  # noqa: E501

        :return: The status of this UpdateObjectStorageResponseData.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this UpdateObjectStorageResponseData.

        The object storage status  # noqa: E501

        :param status: The status of this UpdateObjectStorageResponseData.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        allowed_values = ["READY", "PROVISIONING", "UPGRADING", "CANCELLED", "ERROR", "ENABLED", "DISABLED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def total_purchased_space_tb(self):
        """Gets the total_purchased_space_tb of this UpdateObjectStorageResponseData.  # noqa: E501

        Total purchased object storage space in TB.  # noqa: E501

        :return: The total_purchased_space_tb of this UpdateObjectStorageResponseData.  # noqa: E501
        :rtype: float
        """
        return self._total_purchased_space_tb

    @total_purchased_space_tb.setter
    def total_purchased_space_tb(self, total_purchased_space_tb):
        """Sets the total_purchased_space_tb of this UpdateObjectStorageResponseData.

        Total purchased object storage space in TB.  # noqa: E501

        :param total_purchased_space_tb: The total_purchased_space_tb of this UpdateObjectStorageResponseData.  # noqa: E501
        :type: float
        """
        if total_purchased_space_tb is None:
            raise ValueError("Invalid value for `total_purchased_space_tb`, must not be `None`")  # noqa: E501

        self._total_purchased_space_tb = total_purchased_space_tb

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateObjectStorageResponseData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateObjectStorageResponseData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
