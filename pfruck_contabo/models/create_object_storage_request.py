# coding: utf-8

"""
    Contabo API


    OpenAPI spec version: 1.0.0
    Contact: support@contabo.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreateObjectStorageRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'region': 'str',
        'auto_scaling': 'AllOfCreateObjectStorageRequestAutoScaling',
        'total_purchased_space_tb': 'float'
    }

    attribute_map = {
        'region': 'region',
        'auto_scaling': 'autoScaling',
        'total_purchased_space_tb': 'totalPurchasedSpaceTB'
    }

    def __init__(self, region='EU', auto_scaling=None, total_purchased_space_tb=None):  # noqa: E501
        """CreateObjectStorageRequest - a model defined in Swagger"""  # noqa: E501
        self._region = None
        self._auto_scaling = None
        self._total_purchased_space_tb = None
        self.discriminator = None
        self.region = region
        if auto_scaling is not None:
            self.auto_scaling = auto_scaling
        self.total_purchased_space_tb = total_purchased_space_tb

    @property
    def region(self):
        """Gets the region of this CreateObjectStorageRequest.  # noqa: E501

        Region where the object storage should be located. Default is EU  # noqa: E501

        :return: The region of this CreateObjectStorageRequest.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this CreateObjectStorageRequest.

        Region where the object storage should be located. Default is EU  # noqa: E501

        :param region: The region of this CreateObjectStorageRequest.  # noqa: E501
        :type: str
        """
        if region is None:
            raise ValueError("Invalid value for `region`, must not be `None`")  # noqa: E501

        self._region = region

    @property
    def auto_scaling(self):
        """Gets the auto_scaling of this CreateObjectStorageRequest.  # noqa: E501

        Autoscaling settings  # noqa: E501

        :return: The auto_scaling of this CreateObjectStorageRequest.  # noqa: E501
        :rtype: AllOfCreateObjectStorageRequestAutoScaling
        """
        return self._auto_scaling

    @auto_scaling.setter
    def auto_scaling(self, auto_scaling):
        """Sets the auto_scaling of this CreateObjectStorageRequest.

        Autoscaling settings  # noqa: E501

        :param auto_scaling: The auto_scaling of this CreateObjectStorageRequest.  # noqa: E501
        :type: AllOfCreateObjectStorageRequestAutoScaling
        """

        self._auto_scaling = auto_scaling

    @property
    def total_purchased_space_tb(self):
        """Gets the total_purchased_space_tb of this CreateObjectStorageRequest.  # noqa: E501

        Amount of purchased / requested object storage in TB.  # noqa: E501

        :return: The total_purchased_space_tb of this CreateObjectStorageRequest.  # noqa: E501
        :rtype: float
        """
        return self._total_purchased_space_tb

    @total_purchased_space_tb.setter
    def total_purchased_space_tb(self, total_purchased_space_tb):
        """Sets the total_purchased_space_tb of this CreateObjectStorageRequest.

        Amount of purchased / requested object storage in TB.  # noqa: E501

        :param total_purchased_space_tb: The total_purchased_space_tb of this CreateObjectStorageRequest.  # noqa: E501
        :type: float
        """
        if total_purchased_space_tb is None:
            raise ValueError("Invalid value for `total_purchased_space_tb`, must not be `None`")  # noqa: E501

        self._total_purchased_space_tb = total_purchased_space_tb

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateObjectStorageRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateObjectStorageRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
