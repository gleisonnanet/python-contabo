# coding: utf-8

"""
    Contabo API


    OpenAPI spec version: 1.0.0
    Contact: support@contabo.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DataCenterResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'slug': 'str',
        'capabilities': 'list[str]',
        's3_url': 'str',
        'region_name': 'str',
        'region_slug': 'str',
        'tenant_id': 'str',
        'customer_id': 'str'
    }

    attribute_map = {
        'name': 'name',
        'slug': 'slug',
        'capabilities': 'capabilities',
        's3_url': 's3Url',
        'region_name': 'regionName',
        'region_slug': 'regionSlug',
        'tenant_id': 'tenantId',
        'customer_id': 'customerId'
    }

    def __init__(self, name=None, slug=None, capabilities=None, s3_url=None, region_name=None, region_slug=None, tenant_id=None, customer_id=None):  # noqa: E501
        """DataCenterResponse - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._slug = None
        self._capabilities = None
        self._s3_url = None
        self._region_name = None
        self._region_slug = None
        self._tenant_id = None
        self._customer_id = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if slug is not None:
            self.slug = slug
        if capabilities is not None:
            self.capabilities = capabilities
        self.s3_url = s3_url
        if region_name is not None:
            self.region_name = region_name
        if region_slug is not None:
            self.region_slug = region_slug
        if tenant_id is not None:
            self.tenant_id = tenant_id
        if customer_id is not None:
            self.customer_id = customer_id

    @property
    def name(self):
        """Gets the name of this DataCenterResponse.  # noqa: E501

        Name of the data center  # noqa: E501

        :return: The name of this DataCenterResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DataCenterResponse.

        Name of the data center  # noqa: E501

        :param name: The name of this DataCenterResponse.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def slug(self):
        """Gets the slug of this DataCenterResponse.  # noqa: E501

        Slug of the data center  # noqa: E501

        :return: The slug of this DataCenterResponse.  # noqa: E501
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this DataCenterResponse.

        Slug of the data center  # noqa: E501

        :param slug: The slug of this DataCenterResponse.  # noqa: E501
        :type: str
        """
        if slug is None:
            raise ValueError("Invalid value for `slug`, must not be `None`")  # noqa: E501

        self._slug = slug

    @property
    def capabilities(self):
        """Gets the capabilities of this DataCenterResponse.  # noqa: E501

        Available capabilites in this data center  # noqa: E501

        :return: The capabilities of this DataCenterResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._capabilities

    @capabilities.setter
    def capabilities(self, capabilities):
        """Sets the capabilities of this DataCenterResponse.

        Available capabilites in this data center  # noqa: E501

        :param capabilities: The capabilities of this DataCenterResponse.  # noqa: E501
        :type: list[str]
        """
        if capabilities is None:
            raise ValueError("Invalid value for `capabilities`, must not be `None`")  # noqa: E501

        self._capabilities = capabilities

    @property
    def s3_url(self):
        """Gets the s3_url of this DataCenterResponse.  # noqa: E501

        S3 URL of the data center  # noqa: E501

        :return: The s3_url of this DataCenterResponse.  # noqa: E501
        :rtype: str
        """
        return self._s3_url

    @s3_url.setter
    def s3_url(self, s3_url):
        """Sets the s3_url of this DataCenterResponse.

        S3 URL of the data center  # noqa: E501

        :param s3_url: The s3_url of this DataCenterResponse.  # noqa: E501
        :type: str
        """
        if s3_url is None:
            raise ValueError("Invalid value for `s3_url`, must not be `None`")  # noqa: E501

        self._s3_url = s3_url

    @property
    def region_name(self):
        """Gets the region_name of this DataCenterResponse.  # noqa: E501

        Name of the region  # noqa: E501

        :return: The region_name of this DataCenterResponse.  # noqa: E501
        :rtype: str
        """
        return self._region_name

    @region_name.setter
    def region_name(self, region_name):
        """Sets the region_name of this DataCenterResponse.

        Name of the region  # noqa: E501

        :param region_name: The region_name of this DataCenterResponse.  # noqa: E501
        :type: str
        """
        if region_name is None:
            raise ValueError("Invalid value for `region_name`, must not be `None`")  # noqa: E501

        self._region_name = region_name

    @property
    def region_slug(self):
        """Gets the region_slug of this DataCenterResponse.  # noqa: E501

        Slug of the region  # noqa: E501

        :return: The region_slug of this DataCenterResponse.  # noqa: E501
        :rtype: str
        """
        return self._region_slug

    @region_slug.setter
    def region_slug(self, region_slug):
        """Sets the region_slug of this DataCenterResponse.

        Slug of the region  # noqa: E501

        :param region_slug: The region_slug of this DataCenterResponse.  # noqa: E501
        :type: str
        """
        if region_slug is None:
            raise ValueError("Invalid value for `region_slug`, must not be `None`")  # noqa: E501

        self._region_slug = region_slug

    @property
    def tenant_id(self):
        """Gets the tenant_id of this DataCenterResponse.  # noqa: E501

        Your customer tenant id  # noqa: E501

        :return: The tenant_id of this DataCenterResponse.  # noqa: E501
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this DataCenterResponse.

        Your customer tenant id  # noqa: E501

        :param tenant_id: The tenant_id of this DataCenterResponse.  # noqa: E501
        :type: str
        """
        if tenant_id is None:
            raise ValueError("Invalid value for `tenant_id`, must not be `None`")  # noqa: E501

        self._tenant_id = tenant_id

    @property
    def customer_id(self):
        """Gets the customer_id of this DataCenterResponse.  # noqa: E501

        Your customer number  # noqa: E501

        :return: The customer_id of this DataCenterResponse.  # noqa: E501
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this DataCenterResponse.

        Your customer number  # noqa: E501

        :param customer_id: The customer_id of this DataCenterResponse.  # noqa: E501
        :type: str
        """
        if customer_id is None:
            raise ValueError("Invalid value for `customer_id`, must not be `None`")  # noqa: E501

        self._customer_id = customer_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DataCenterResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataCenterResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
